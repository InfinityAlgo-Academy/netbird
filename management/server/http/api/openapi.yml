openapi: 3.0.1
info:
  title: NetBird REST API
  description: API to manipulate groups, rules and retrieve information about peers and users
  version: 0.0.1
tags:
  - name: Users
    description: Interact with and view information about users.
  - name: Peers
    description: Interact with and view information about peers.
  - name: Setup Keys
    description: Interact with and view information about setup keys.
  - name: Groups
    description: Interact with and view information about groups.
  - name: Rules
    description: Interact with and view information about rules.
components:
  schemas:
    User:
      type: object
      properties:
        ID:
          description: User ID
          type: string
        Email:
          description: User's email address
          type: string
        Name:
          description: User's name from idp provider
          type: string
        Role:
          description: User's Netbird account role
          type: string
      required:
      - ID
      - Email
      - Name
      - Role
    PeerMinimum:
      type: object
      properties:
        ID:
          description: Peer ID
          type: string
        Name:
          description: Peer's hostname
          type: string
      required:
      - ID
      - Name
    Peer:
      allOf:
        - $ref: '#/components/schemas/PeerMinimum'
        - type: object
          properties:
            IP:
              description: Peer's IP address
              type: string
            Connected:
              description: Peer to Management connection status
              type: boolean
            LastSeen:
              description: Last time peer connected to Netbird's management service
              type: string
              format: date-time
            OS:
              description: Peer's operating system and version
              type: string
            Version:
              description: Peer's daemon or cli version
              type: string
            Groups:
              description: Groups that the peer belongs to
              type: array
              items:
                $ref: '#/components/schemas/GroupMinimum'
            ActivatedBy:
              description: Provides information of who activated the Peer. User or Setup Key
              type: object
              properties:
                Type:
                  type: string
                Value:
                  type: string
              required:
              - Type
              - Value
          required:
          - IP
          - Connected
          - LastSeen
          - OS
          - Version
          - Groups
          - ActivatedBy
    SetupKey:
      type: object
      properties:
        Id:
          description: Setup Key ID
          type: string
        Key:
          description: Setup Key value
          type: string
        Name:
          description: Setup key name identifier
          type: string
        Expires:
          description: Setup Key expiration date
          type: string
          format: date-time
        Type:
          description: Setup key type, one-off for single time usage and reusable
          type: string
        Valid:
          description: Setup key validity status
          type: boolean
        Revoked:
          description: Setup key revocation status
          type: boolean
        UsedTimes:
          description: Usage count of setup key
          type: integer
        LastUsed:
          description: Setup key last usage date
          type: string
          format: date-time
        State:
          description: Setup key status, "valid", "overused","expired" or "revoked"
          type: string
      required:
      - Id
      - Key
      - Name
      - Expires
      - Type
      - Valid
      - Revoked
      - UsedTimes
      - LastUsed
      - State
    SetupKeyRequest:
      type: object
      properties:
        Name:
          description: Setup Key name
          type: string
        Type:
          description: Setup key type, one-off for single time usage and reusable
          type: string
        ExpiresIn:
          description: Expiration time in seconds
          type: integer
        Revoked:
          description: Setup key revocation status
          type: boolean
      required:
        - Name
        - Type
        - ExpiresIn
        - Revoked
    GroupMinimum:
      type: object
      properties:
        ID:
          description: Group ID
          type: string
        Name:
          description: Group Name identifier
          type: string
        PeersCount:
          description: Count of peers associated to the group
          type: integer
      required:
      - ID
      - Name
      - PeersCount
    Group:
      allOf:
        - $ref: '#/components/schemas/GroupMinimum'
        - type: object
          properties:
            Peers:
              description: List of peers object
              type: array
              items:
                $ref: '#/components/schemas/PeerMinimum'
          required:
          - Peers
    GroupPatchOperation:
      type: object
      properties:
        OP:
          description: Patch operation type
          type: string
          enum: [ "replace","add","remove" ]
        Path:
          description: Group field to update in form /<field>
          type: string
          enum: [ "name","peers" ]
        Value:
          description: Values to be applied
          type: array
          items:
            type: string
      required:
        - OP
        - Path
        - Value
    RuleMinimum:
      type: object
      properties:
        Name:
          description: Rule name identifier
          type: string
        Description:
          description: Rule friendly description
          type: string
        Disabled:
          description: Rules status
          type: boolean
        Flow:
          description: Rule flow, currently, only "bidirect" for bi-directional traffic is accepted
          type: string
      required:
      - Name
      - Description
      - Disabled
      - Flow
    Rule:
      allOf:
        - type: object
          properties:
            ID:
              description: Rule ID
              type: string
          required:
          - ID
        - $ref: '#/components/schemas/RuleMinimum'
        - type: object
          properties:
            Source:
              description: Rule source groups
              type: array
              items:
                $ref: '#/components/schemas/GroupMinimum'
            Destination:
              description: Rule destination groups
              type: array
              items:
                $ref: '#/components/schemas/GroupMinimum'
          required:
          - Source
          - Destination
    RulePatchOperation:
      type: object
      properties:
        OP:
          description: Patch operation type
          type: string
          enum: [ "replace","add","remove" ]
        Path:
          description: Rule field to update in form /<field>
          type: string
          enum: [ "name","description","disabled","flow","source","destination" ]
        Value:
          description: Values to be applied
          type: array
          items:
            type: string
      required:
        - OP
        - Path
        - Value
  responses:
    not_found:
      description: Resource not found
      content: {}
    validation_failed_simple:
      description: Validation failed
      content: {}
    bad_request:
      description: Bad Request
      content: {}
    internal_error:
      description: Internal Server Error
      content: { }
    validation_failed:
      description: Validation failed
      content: {}
    forbidden:
      description: Forbidden
      content: {}
    requires_authentication:
      description: Requires authentication
      content: {}
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: [ ]
paths:
  /api/users:
    get:
      summary: Returns a list of all users
      tags: [Users]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A JSON array of Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
  /api/peers:
    get:
      summary: Returns a list of all peers
      tags: [Peers]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A JSON Array of Peers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Peer'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
  /api/peers/{id}:
    get:
      summary: Get information about a peer
      tags: [Peers]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The Peer ID
      responses:
        '200':
          description: A Peer object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Peer'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
    put:
      summary: Update information about a peer
      tags: [Peers]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The Peer ID
      requestBody:
        description: update to peers
        content:
          'application/json':
            schema:
              type: object
              properties:
                Name:
                  type: string
              required:
                - Name
      responses:
        '200':
          description: A Peer object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Peer'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
    delete:
      summary: Delete a peer
      tags: [Peers]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The Peer ID
      responses:
        '200':
          description: Delete status code
          content: {}
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
  /api/setup-keys:
    get:
      summary: Returns a list of all Setup Keys
      tags: [Setup Keys]
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: A JSON Array of Setup keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SetupKey'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
    post:
      summary: Creates a Setup Key
      tags: [Setup Keys]
      security:
        - BearerAuth: [ ]
      requestBody:
        description: New Setup Key request
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SetupKeyRequest'
      responses:
        '200':
          description: A Setup Keys Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetupKey'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
  /api/setup-keys/{id}:
    get:
      summary: Get information about a Setup Key
      tags: [Setup Keys]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The Setup Key ID
      responses:
        '200':
          description: A Setup Key object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetupKey'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
    put:
      summary: Update information about a Setup Key
      tags: [Setup Keys]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The Setup Key ID
      requestBody:
        description: update to Setup Key
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SetupKeyRequest'
      responses:
        '200':
          description: A Setup Key object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetupKey'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
    delete:
      summary: Delete a Setup Key
      tags: [Setup Keys]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The Setup Key ID
      responses:
        '200':
          description: Delete status code
          content: {}
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
  /api/groups:
    get:
      summary: Returns a list of all Groups
      tags: [Groups]
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: A JSON Array of Groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
    post:
      summary: Creates a Group
      tags: [Groups]
      security:
        - BearerAuth: [ ]
      requestBody:
        description: New Group request
        content:
          'application/json':
            schema:
              type: object
              properties:
                Name:
                  type: string
                Peers:
                  type: array
                  items:
                    type: string
              required:
                - Name
      responses:
        '200':
          description: A Group Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
  /api/groups/{id}:
    get:
      summary: Get information about a Group
      tags: [Groups]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The Group ID
      responses:
        '200':
          description: A Group object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
    put:
      summary: Update/Replace a Group
      tags: [Groups]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The Group ID
      requestBody:
        description: Update Group request
        content:
          'application/json':
            schema:
              type: object
              properties:
                Name:
                  type: string
                Peers:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: A Group object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
    patch:
      summary: Update information about a Group
      tags: [ Groups ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The Group ID
      requestBody:
        description: Update Group request using a list of json patch objects
        content:
          'application/json':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/GroupPatchOperation'
      responses:
        '200':
          description: A Group object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
    delete:
      summary: Delete a Group
      tags: [Groups]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The Group ID
      responses:
        '200':
          description: Delete status code
          content: {}
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
  /api/rules:
    get:
      summary: Returns a list of all Rules
      tags: [Rules]
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: A JSON Array of Rules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
    post:
      summary: Creates a Rule
      tags: [Rules]
      security:
        - BearerAuth: [ ]
      requestBody:
        description: New Rule request
        content:
          'application/json':
            schema:
              allOf:
                - $ref: '#/components/schemas/RuleMinimum'
                - type: object
                  properties:
                    Source:
                      type: array
                      items:
                        type: string
                    Destination:
                      type: array
                      items:
                        type: string
      responses:
        '200':
          description: A Rule Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
  /api/rules/{id}:
    get:
      summary: Get information about a Rules
      tags: [Rules]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The Rule ID
      responses:
        '200':
          description: A Rule object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
    put:
      summary: Update/Replace a Rule
      tags: [Rules]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The Rule ID
      requestBody:
        description: Update Rule request
        content:
          'application/json':
            schema:
              allOf:
                - $ref: '#/components/schemas/RuleMinimum'
                - type: object
                  properties:
                    Source:
                      type: array
                      items:
                        type: string
                    Destination:
                      type: array
                      items:
                        type: string
      responses:
        '200':
          description: A Rule object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
    patch:
      summary: Update information about a Rule
      tags: [ Rules ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The Rule ID
      requestBody:
        description: Update Rule request using a list of json patch objects
        content:
          'application/json':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RulePatchOperation'
      responses:
        '200':
          description: A Rule object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"
    delete:
      summary: Delete a Rule
      tags: [Rules]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The Rule ID
      responses:
        '200':
          description: Delete status code
          content: {}
        '400':
          "$ref": "#/components/responses/bad_request"
        '401':
          "$ref": "#/components/responses/requires_authentication"
        '403':
          "$ref": "#/components/responses/forbidden"
        '500':
          "$ref": "#/components/responses/internal_error"