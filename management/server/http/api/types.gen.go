// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for GroupPatchOperationOp.
const (
	GroupPatchOperationOpAdd     GroupPatchOperationOp = "add"
	GroupPatchOperationOpRemove  GroupPatchOperationOp = "remove"
	GroupPatchOperationOpReplace GroupPatchOperationOp = "replace"
)

// Defines values for GroupPatchOperationPath.
const (
	GroupPatchOperationPathName  GroupPatchOperationPath = "name"
	GroupPatchOperationPathPeers GroupPatchOperationPath = "peers"
)

// Defines values for RulePatchOperationOp.
const (
	RulePatchOperationOpAdd     RulePatchOperationOp = "add"
	RulePatchOperationOpRemove  RulePatchOperationOp = "remove"
	RulePatchOperationOpReplace RulePatchOperationOp = "replace"
)

// Defines values for RulePatchOperationPath.
const (
	RulePatchOperationPathDescription  RulePatchOperationPath = "description"
	RulePatchOperationPathDestinations RulePatchOperationPath = "destinations"
	RulePatchOperationPathEnabled      RulePatchOperationPath = "enabled"
	RulePatchOperationPathFlow         RulePatchOperationPath = "flow"
	RulePatchOperationPathName         RulePatchOperationPath = "name"
	RulePatchOperationPathSources      RulePatchOperationPath = "sources"
)

// Group defines model for Group.
type Group struct {
	// Group ID
	Id string `json:"id"`

	// Group Name identifier
	Name string `json:"name"`

	// List of peers object
	Peers []PeerMinimum `json:"peers"`

	// Count of peers associated to the group
	PeersCount int `json:"peers_count"`
}

// GroupMinimum defines model for GroupMinimum.
type GroupMinimum struct {
	// Group ID
	Id string `json:"id"`

	// Group Name identifier
	Name string `json:"name"`

	// Count of peers associated to the group
	PeersCount int `json:"peers_count"`
}

// GroupPatchOperation defines model for GroupPatchOperation.
type GroupPatchOperation struct {
	// Patch operation type
	Op GroupPatchOperationOp `json:"op"`

	// Group field to update in form /<field>
	Path GroupPatchOperationPath `json:"path"`

	// Values to be applied
	Value []string `json:"value"`
}

// Patch operation type
type GroupPatchOperationOp string

// Group field to update in form /<field>
type GroupPatchOperationPath string

// Peer defines model for Peer.
type Peer struct {
	// Provides information of who activated the Peer. User or Setup Key
	ActivatedBy struct {
		Type  string `json:"type"`
		Value string `json:"value"`
	} `json:"activated_by"`

	// Peer to Management connection status
	Connected bool `json:"connected"`

	// Groups that the peer belongs to
	Groups []GroupMinimum `json:"groups"`

	// Peer ID
	Id string `json:"id"`

	// Peer's IP address
	Ip string `json:"ip"`

	// Last time peer connected to Netbird's management service
	LastSeen time.Time `json:"last_seen"`

	// Peer's hostname
	Name string `json:"name"`

	// Peer's operating system and version
	Os string `json:"os"`

	// Peer's daemon or cli version
	Version string `json:"version"`
}

// PeerMinimum defines model for PeerMinimum.
type PeerMinimum struct {
	// Peer ID
	Id string `json:"id"`

	// Peer's hostname
	Name string `json:"name"`
}

// Rule defines model for Rule.
type Rule struct {
	// Rule friendly description
	Description string `json:"description"`

	// Rule destination groups
	Destinations []GroupMinimum `json:"destinations"`

	// Rules status
	Enabled bool `json:"enabled"`

	// Rule flow, currently, only "bidirect" for bi-directional traffic is accepted
	Flow string `json:"flow"`

	// Rule ID
	Id string `json:"id"`

	// Rule name identifier
	Name string `json:"name"`

	// Rule source groups
	Sources []GroupMinimum `json:"sources"`
}

// RuleMinimum defines model for RuleMinimum.
type RuleMinimum struct {
	// Rule friendly description
	Description string `json:"description"`

	// Rules status
	Enabled bool `json:"enabled"`

	// Rule flow, currently, only "bidirect" for bi-directional traffic is accepted
	Flow string `json:"flow"`

	// Rule name identifier
	Name string `json:"name"`
}

// RulePatchOperation defines model for RulePatchOperation.
type RulePatchOperation struct {
	// Patch operation type
	Op RulePatchOperationOp `json:"op"`

	// Rule field to update in form /<field>
	Path RulePatchOperationPath `json:"path"`

	// Values to be applied
	Value []string `json:"value"`
}

// Patch operation type
type RulePatchOperationOp string

// Rule field to update in form /<field>
type RulePatchOperationPath string

// SetupKey defines model for SetupKey.
type SetupKey struct {
	// Setup Key expiration date
	Expires time.Time `json:"expires"`

	// Setup Key ID
	Id string `json:"id"`

	// Setup Key value
	Key string `json:"key"`

	// Setup key last usage date
	LastUsed time.Time `json:"last_used"`

	// Setup key name identifier
	Name string `json:"name"`

	// Setup key revocation status
	Revoked bool `json:"revoked"`

	// Setup key status, "valid", "overused","expired" or "revoked"
	State string `json:"state"`

	// Setup key type, one-off for single time usage and reusable
	Type string `json:"type"`

	// Usage count of setup key
	UsedTimes int `json:"used_times"`

	// Setup key validity status
	Valid bool `json:"valid"`
}

// SetupKeyRequest defines model for SetupKeyRequest.
type SetupKeyRequest struct {
	// Expiration date
	Expires time.Time `json:"expires"`

	// Setup Key name
	Name string `json:"name"`

	// Setup key revocation status
	Revoked bool `json:"revoked"`

	// Setup key type, one-off for single time usage and reusable
	Type string `json:"type"`
}

// User defines model for User.
type User struct {
	// User's email address
	Email string `json:"email"`

	// User ID
	Id string `json:"id"`

	// User's name from idp provider
	Name string `json:"name"`

	// User's Netbird account role
	Role string `json:"role"`
}

// PostApiGroupsJSONBody defines parameters for PostApiGroups.
type PostApiGroupsJSONBody struct {
	Name string `json:"name"`
}

// PatchApiGroupsIdJSONBody defines parameters for PatchApiGroupsId.
type PatchApiGroupsIdJSONBody = []GroupPatchOperation

// PutApiGroupsIdJSONBody defines parameters for PutApiGroupsId.
type PutApiGroupsIdJSONBody struct {
	Name  *string   `json:"name,omitempty"`
	Peers *[]string `json:"peers,omitempty"`
}

// PutApiPeersIdJSONBody defines parameters for PutApiPeersId.
type PutApiPeersIdJSONBody struct {
	Name string `json:"name"`
}

// PostApiRulesJSONBody defines parameters for PostApiRules.
type PostApiRulesJSONBody struct {
	// Rule friendly description
	Description  string    `json:"description"`
	Destinations *[]string `json:"destinations,omitempty"`

	// Rules status
	Enabled bool `json:"enabled"`

	// Rule flow, currently, only "bidirect" for bi-directional traffic is accepted
	Flow string `json:"flow"`

	// Rule name identifier
	Name    string    `json:"name"`
	Sources *[]string `json:"sources,omitempty"`
}

// PatchApiRulesIdJSONBody defines parameters for PatchApiRulesId.
type PatchApiRulesIdJSONBody = []RulePatchOperation

// PutApiRulesIdJSONBody defines parameters for PutApiRulesId.
type PutApiRulesIdJSONBody struct {
	// Rule friendly description
	Description  string    `json:"description"`
	Destinations *[]string `json:"destinations,omitempty"`

	// Rules status
	Enabled bool `json:"enabled"`

	// Rule flow, currently, only "bidirect" for bi-directional traffic is accepted
	Flow string `json:"flow"`

	// Rule name identifier
	Name    string    `json:"name"`
	Sources *[]string `json:"sources,omitempty"`
}

// PostApiSetupKeysJSONBody defines parameters for PostApiSetupKeys.
type PostApiSetupKeysJSONBody = SetupKeyRequest

// PutApiSetupKeysIdJSONBody defines parameters for PutApiSetupKeysId.
type PutApiSetupKeysIdJSONBody = SetupKeyRequest

// PostApiGroupsJSONRequestBody defines body for PostApiGroups for application/json ContentType.
type PostApiGroupsJSONRequestBody PostApiGroupsJSONBody

// PatchApiGroupsIdJSONRequestBody defines body for PatchApiGroupsId for application/json ContentType.
type PatchApiGroupsIdJSONRequestBody = PatchApiGroupsIdJSONBody

// PutApiGroupsIdJSONRequestBody defines body for PutApiGroupsId for application/json ContentType.
type PutApiGroupsIdJSONRequestBody PutApiGroupsIdJSONBody

// PutApiPeersIdJSONRequestBody defines body for PutApiPeersId for application/json ContentType.
type PutApiPeersIdJSONRequestBody PutApiPeersIdJSONBody

// PostApiRulesJSONRequestBody defines body for PostApiRules for application/json ContentType.
type PostApiRulesJSONRequestBody PostApiRulesJSONBody

// PatchApiRulesIdJSONRequestBody defines body for PatchApiRulesId for application/json ContentType.
type PatchApiRulesIdJSONRequestBody = PatchApiRulesIdJSONBody

// PutApiRulesIdJSONRequestBody defines body for PutApiRulesId for application/json ContentType.
type PutApiRulesIdJSONRequestBody PutApiRulesIdJSONBody

// PostApiSetupKeysJSONRequestBody defines body for PostApiSetupKeys for application/json ContentType.
type PostApiSetupKeysJSONRequestBody = PostApiSetupKeysJSONBody

// PutApiSetupKeysIdJSONRequestBody defines body for PutApiSetupKeysId for application/json ContentType.
type PutApiSetupKeysIdJSONRequestBody = PutApiSetupKeysIdJSONBody

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
