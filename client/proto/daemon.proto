syntax = "proto3";

import "google/protobuf/descriptor.proto";

option go_package = "/proto";

package daemon;

service DaemonService {
  // Login uses setup key to prepare configuration for the daemon.
  rpc Login(LoginRequest) returns (LoginResponse) {}

  // Up starts engine work in the daemon.
  rpc Up(UpRequest) returns (UpResponse) {}

  // Status of the service.
  rpc Status(StatusRequest) returns (StatusResponse) {}

  // Down engine work in the daemon.
  rpc Down(DownRequest) returns (DownResponse) {}

  // GetConfig of the daemon.
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse) {}
};

message LoginRequest {
  // setupKey wiretrustee setup key.
  string setupKey = 1;

  // preSharedKey for wireguard setup.
  string preSharedKey = 2;

  // managementUrl to authenticate.
  string managementUrl = 3;

  // adminUrl to manage keys.
  string adminURL = 4;

  // jwtToken sso token to authenticate.
  string jwtToken = 5;
}

message LoginResponse {}

message UpRequest {}

message UpResponse {}

message StatusRequest{}

message StatusResponse{
  // status of the server.
  string status = 1;
}

message DownRequest {}

message DownResponse {}

message GetConfigRequest {}

message GetConfigResponse {
  // managementUrl settings value.
  string managementUrl = 1;

  // configFile settings value.
  string configFile = 2;

  // logFile settings value.
  string logFile = 3;

  // preSharedKey settings value.
  string preSharedKey = 4;

  // adminURL settings value.
  string adminURL = 5;

  // DeviceAuthorizationFlow represents Device Authorization Flow information
  DeviceAuthorizationFlow deviceAuthorizationFlow = 6;
}

// DeviceAuthorizationFlow represents Device Authorization Flow information
// that can be used by the client to login initiate a Oauth 2.0 device authorization grant flow
// see https://datatracker.ietf.org/doc/html/rfc8628
message DeviceAuthorizationFlow {
  // An IDP provider , (eg. Hosted)
  provider Provider = 1;
  ProviderConfig ProviderConfig = 2;

  enum provider {
    HOSTED = 0;
  }
}

// ProviderConfig has all attributes needed to initiate a device authorization flow
message ProviderConfig {
  // An IDP application client id
  string ClientID = 1;
  // An IDP application client secret
  string ClientSecret = 2;
  // An IDP API domain
  string Domain = 3;
  // An Audience for validation
  string Audience = 4;
}